Write a function that takes in a non-empty array of distint integers and an integer representing a target sum. If any two numbers in the input array sum upto the target sum, the function should return them in an array, in anay order. If no two numbers sumupto the target sum,the function should return an empty array.

Note that the target sum has to be obtained by summing two different integers in the array;
you cant add a single integer to itself in orderto obtain targetsum

you can assume that there will be at most one pair of numbers summing upto the targetsum.

Simple iput:

array = [3,5,-4,8,-11,-1,1,6]

target sum = 10

sample ouput:

[-1,11]


answer:

#include <vector>
using namespace std;

vector<int> twoNumberSum(vector<int> array, int targetSum) {
	for (int icnt=0; icnt < array.size(); icnt++){
		int SumEle1 = array[icnt];
	for (int jcnt= icnt + 1; jcnt < array.size(); jcnt++) {
		int SumEle2 = array[jcnt];
		if (SumEle1 + SumEle2 == targetSum){
			return vector<int>{SumEle1,SumEle2};
			}
		}
	}
  return {};
}


solution2:


#include <vector>
#include <unordered_set>
using namespace std;

vector<int> twoNumberSum(vector<int> array, int targetSum) {
	unordered_set<int> nums;
	for (int num : array) {
	  int match = targetSum - num;
          if (nums.find(match) != nums.end()){
		return vector<int>{match,num};
		} else {
		 nums.insert(num);
		}

	}
	return {};
}